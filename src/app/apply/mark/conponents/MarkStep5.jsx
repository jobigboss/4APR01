"use client"
import React, { useState } from 'react';
import Card from '../conponents/Crad';

function MarkStep5({ formData, onSubmit, onPrev }) {
  const [agreed, setAgreed] = useState(false); // ‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
  const [fileInputRef, setFileInputRef] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå
  const [generatedID, setGeneratedID] = useState(null);
  const [isPopupOpen, setIsPopupOpen] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Popup
  
  const handleSubmit = async () => {
    let newID;
    try {
      // ‚úÖ STEP 1: ‡∏Ç‡∏≠ newID ‡∏à‡∏≤‡∏Å API
      try {
        const idRes = await fetch('/api/gen-rec-id-mark');

        if (!idRes.ok) {
          throw new Error(`API Error: ${idRes.status} ${idRes.statusText}`);
        }

        const resJson = await idRes.json();
        newID = resJson.newID;

        console.log('‚úÖ newID ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', newID);

      } catch (err) {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠ newID:', err);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠ newID ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }   

      // ‚úÖ STEP 2: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö /public/img_rec ‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤ ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å formData.capturedImage
      // STEP 2: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      let savedImageUrl = '';
      console.log(formData.recCapturedImage);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ formData.recCapturedImage ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
      if (formData.recCapturedImage) {
        const imageName = `${newID}.png`; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å newID
        try {
          // ‡∏ñ‡πâ‡∏≤ base64 ‡∏°‡∏µ prefix 'data:image/png;base64,' ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
          const base64Image = formData.recCapturedImage.split(',')[1]; // ‡∏•‡∏ö header
      
          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
          const imageRes = await fetch('/api/uploadImg', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              base64Image: base64Image, // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ base64 data
              imageName: imageName,
            }),
          });
      
          const imageData = await imageRes.json();
          if (!imageData.success) throw new Error('Failed to save image');
          savedImageUrl = imageData.imageUrl; // ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
          console.log('üì∏ Image saved at:', savedImageUrl);
        } catch (error) {
          console.error('Error uploading image:', error);
        }
      } else {
        console.log('No captured image found.');
      }
      
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á savedImageUrl ‡πÅ‡∏•‡∏∞ formData.fileInputRef
      const fileInputRefValue = savedImageUrl || formData.fileInputRef || ''; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å savedImageUrl ‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ formData.fileInputRef ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      
      console.log('File Input Reference Value:', fileInputRefValue);     
  

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ recEducation ‡πÅ‡∏•‡∏∞ recWorkHistory ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const recEducationArray = Array.isArray(formData.recEducation)
          ? formData.recEducation  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á
          : JSON.parse(formData.recEducation);  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array

        const recWorkHistoryArray = Array.isArray(formData.recWorkHistory)
          ? formData.recWorkHistory  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á
          : JSON.parse(formData.recWorkHistory);  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ recEducationArray ‡πÅ‡∏•‡∏∞ recWorkHistoryArray ‡πÄ‡∏õ‡πá‡∏ô Array
        if (!Array.isArray(recEducationArray)) {
          console.error("recEducationArray is not an array");
          return;
        }

        if (!Array.isArray(recWorkHistoryArray)) {
          console.error("recWorkHistoryArray is not an array");
          return;
        } 

          // ‡πÅ‡∏õ‡∏•‡∏á Array ‡πÄ‡∏õ‡πá‡∏ô String
          const recEducationString = recEducationArray
            .map(item => `${item.school} ${item.degree} ${item.year}`)
            .join("\n");

          const recWorkHistoryString = recWorkHistoryArray
            .map(item => `${item.company} ${item.position} ${item.years}`)
            .join("\n");

          console.log(recEducationString);
          console.log(recWorkHistoryString);

      // ‚úÖ STEP 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ MongoDB
      const applicationData = {
        ID_Rec: newID,
        rec_Date: new Date(),
        ID_Emp: "SF2504001",
        ID_Position: formData.selectedPosition || "",
        recID_Card: formData.recID_Card,
        recPrefix: formData.recPrefix,
        recFirst_Name_TH: formData.recFirst_Name_TH,
        recLast_Name_TH: formData.recLast_Name_TH,
        recFirst_Name_EN: formData.recFirst_Name_EN,
        recLast_Name_EN: formData.recLast_Name_EN,
        recNick_Name: formData.recNick_Name,
        recDate_of_Birth: formData.recDate_of_Birth,
        recAge: formData.recAge,
        recGender: formData.recGender,
        recWeight: formData.recWeight,
        recHeight: formData.recHeight,
        recRace: formData.recRace,
        recNationality: formData.recNationality,
        recReligion: formData.recReligion,
        recPhysical_Ipairment: formData.recPhysical_Ipairment,
        recPhysical_Ipairment_other: formData.recPhysical_Ipairment_other,
        recCongenital_Dseases: formData.recCongenital_Dseases,
        recCongenital_Dseases_other: formData.recCongenital_Dseases_other,
        recCriminal_Rcord: formData.recCriminal_Rcord,
        recCriminal_Rcord_other: formData.recCriminal_Rcord_other,
        recTattoo: formData.recTattoo,
        recTattoo_other: formData.recTattoo_other,
        recMotorcycle: formData.recMotorcycle,
        recMotorcycleLicense: formData.recMotorcycleLicense,
        recCar: formData.recCar,
        recCarLicense: formData.recCarLicense,
        fileInputRef: fileInputRefValue || '', // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined
        recEducation: recEducationString,
        recWorkHistory: recWorkHistoryString,
        recWorkExperience: formData.recWorkExperience,
        recTel: formData.recTel,
        recEmail: formData.recEmail,
        recLine: formData.recLine,
        recFacebook: formData.recFacebook,
        recProvice: formData.recProvice,
        recDistrict: formData.recDistrict,
        recSubDistrict: formData.recSubDistrict,
        recPostcode: formData.recPostcode,
        recAddrees1: formData.recAddrees1,
        recInterview1: false,
        recInterview2: false,
        ID_Req: null,
        recWSD: null,
        recED: null,
        recActuality: false,
        proSignature: null,
        ID_Payroll: null,
      };

      const saveRes = await fetch('/api/recRegister', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(applicationData),
      });

      const saveResult = await saveRes.json();
      if (saveResult.success) {
        setIsPopupOpen(true);  // ‡πÄ‡∏õ‡∏¥‡∏î Popup
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á Popup
        setTimeout(() => {
          window.location.reload();
        }, 10000);  // ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô Popup ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
      } else {
        alert('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (err) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    } finally {
      setIsLoading(false); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    }
  };

  const closePopup = () => {
    setIsPopupOpen(false); // ‡∏õ‡∏¥‡∏î Popup
  };
  
  return (
    <div className="w-full max-w-lg bg-white p-8 rounded-xl shadow-lg space-y-6 mx-auto">
      <h2 className="text-2xl font-semibold text-gray-700 mb-4">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>

      <div className="space-y-4">
        <p><strong>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ :</strong> {formData.selectedPosition}</p>
        <p><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• :</strong> {formData.recFirst_Name_TH} {formData.recLast_Name_TH}</p>
        <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô :</strong> {formData.recNick_Name}</p>
        <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ :</strong> {formData.recTel}</p>

        {/* ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á (PDPA) */}
        <div className="bg-gray-100 p-4 rounded-md text-sm text-gray-700">
          <h3 className="font-semibold mb-2">‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á (PDPA)</h3>
          <ol className="list-decimal pl-5 space-y-2">
            <li>
              ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á ‡πÄ‡∏Å‡πá‡∏ö ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤
              ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
              ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡∏û.‡∏®. 2562 ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            </li>
            <li>
              ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á ‡∏´‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πá‡∏à
              ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏¥‡∏Å‡∏à‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
            </li>
          </ol>

          {/* ‚úÖ Checkbox */}
          <div className="mt-4 flex items-start gap-2">
            <input
              type="checkbox"
              id="agree"
              checked={agreed}
              onChange={(e) => setAgreed(e.target.checked)}
              className="mt-1"
            />
            <label htmlFor="agree" className="text-sm">
              ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô
            </label>
          </div>
        </div>

      </div>

      <div className="flex justify-between">
        <button className="bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-lg" onClick={onPrev}>
          ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        </button>

        <button
          className={`py-3 px-4 rounded-lg text-white ${agreed ? 'bg-indigo-600 hover:bg-indigo-700' : 'bg-gray-300 cursor-not-allowed'}`}
          onClick={handleSubmit}
          disabled={!agreed}
        >
          ‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        </button>
      </div>

      {/* Popup */}
      {isPopupOpen && (
        <div className="fixed inset-0 flex justify-center items-center bg-gray-900 bg-opacity-50 z-50">
          <Card />
          <button onClick={closePopup} className="absolute top-2 right-2 text-white bg-red-500 p-2 rounded-full">X</button>
        </div>
      )}
      
    </div>
  );
}

export default MarkStep5;
